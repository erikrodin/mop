/*
 * 	startup.c
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */
}

    #define EXTI_IMR  ((volatile unsigned int*) 0x40013C00) 
    #define EXTI_EMR  ((volatile unsigned int*) 0x40012C04)
    #define EXTI_RTSR ((volatile unsigned int*) 0x40013C08)
    #define EXTI_FTSR ((volatile unsigned int*) 0x40013C0C)
    #define EXTI_SWIER ((volatile unsigned int*) 0x40013C10)
    #define EXTI_PR  ((volatile unsigned int*)  0x40013C14)
    
    #define EXTI3_IRQVEC  ((volatile unsigned int*)   0x2001C064) 
    #define EXTI2_IRQVEC  ((volatile unsigned int*)   0x2001C060)
    #define EXTI1_IRQVEC  ((volatile unsigned int*)   0x2001C05C)
    #define EXTI0_IRQVEC  ((volatile unsigned int*)   0x2001C058)  
    
    #define SYSCFG_EXTICR1 0x40013808



    #define PORT_D_BASE 0x40020C00
    #define portD_Moder ((volatile unsigned int* ) (PORT_D_BASE))
    #define portD_Otyper ((volatile unsigned short*) (PORT_D_BASE+0x4))
    #define portD_Ospeedr ((volatile unsigned int* ) (PORT_D_BASE+0x8))
    #define portD_Pupdr ((volatile unsigned int*) (PORT_D_BASE+0xC))
    
    #define portD_Idr_LOW ((volatile unsigned char* ) (PORT_D_BASE+0x10))
    #define GPIO_IDR_HIGH ((volatile unsigned char*) (PORT_D_BASE+0x11))
    #define GPIO_D_ODR_LOW ((volatile unsigned char* ) (PORT_D_BASE+0x14))
    #define GPIO_ODR_HIGH ((volatile unsigned char*) (PORT_D_BASE+0x15))
    
    #define PORT_E_BASE 0x40021000
    #define portE_Moder ((volatile unsigned int* ) (PORT_E_BASE))
    #define portE_Otyper ((volatile unsigned short*) (PORT_E_BASE+0x4))
    #define portE_Ospeedr ((volatile unsigned int* ) (PORT_E_BASE+0x8))
    #define portE_Pupdr ((volatile unsigned int*) (PORT_E_BASE+0xC))
    
    #define portE_Idr_LOW ((volatile unsigned char* ) (PORT_E_BASE+0x10))
    #define GPIO_IDR_HIGH ((volatile unsigned char*) (PORT_E_BASE+0x11))
    #define GPIO_E_ODR_LOW ((volatile unsigned char* ) (PORT_E_BASE+0x14))
    #define GPIO_ODR_HIGH ((volatile unsigned char*) (PORT_E_BASE+0x15))
    
    #define SCB_VTOR ((volatile unsigned int*) (0xE000ED08))


static volatile int count;

void interrupt_handler (void);

init_app(void)
{
    *portD_Moder=0x55555555;            // kopplar pe3 til
    *portE_Moder=0x55555500;            //kOPPLAR upp utport till visningsenhet
    *((unsigned int*) SYSCFG_EXTICR1) &= ~0xF000;//nollställer fält
    *((unsigned int*) SYSCFG_EXTICR1) |= 0x4000;  //detta är konfigurationer för exti
    
    *((unsigned int*) 0x40013C00) |= 8;
    *((unsigned int*) 0x40013C08) |= 8;
    *((unsigned int*) 0x40013C0C) &= ~8;
    
    *SCB_VTOR=0x2001C000;
    *((void (**) (void)) 0x2001C064) =interrupt_handler;   //exti3
    *((void (**) (void)) 0x2001C060) =interrupt_handler;    //exti2
    *((void (**) (void)) 0x2001C05C) =interrupt_handler;    //exti1
    *((void (**) (void)) 0x2001C058) =interrupt_handler;    //exti0
    *((unsigned int*)  0xE000E100) |= (1<<9);
}



void interrupt_handler (void)
{
     *EXTI_PR |= (1<<3);
   
    if ( *portE_Idr_LOW & 1)
    {
        *GPIO_E_ODR_LOW |= (1<<4);
        *GPIO_E_ODR_LOW &= ~(1<<4);
        count++;
    }
    if (*portE_Idr_LOW & 2)
    {
         *GPIO_E_ODR_LOW |= (1<<5);
         *GPIO_E_ODR_LOW &= ~(1<<5);
         count=0;
    }
    if ( *portE_Idr_LOW & 4)
    {
        *GPIO_E_ODR_LOW |= (1<<6);
         *GPIO_E_ODR_LOW &= ~(1<<6);
        if ( count > 0)
        {
            count=0;
        }
        else
        {
        count= 0xFF;
        }
    }
    
    
    
}


void main(void)
{
    init_app();
    while(1)
    {
        *GPIO_D_ODR_LOW = count;
    }
}

